var _user$project$Audio$toNoteTuple = function (key) {
	var _p0 = key;
	switch (_p0) {
		case 65:
			return {ctor: '_Tuple2', _0: 'C', _1: 3};
		case 87:
			return {ctor: '_Tuple2', _0: 'C#', _1: 3};
		case 83:
			return {ctor: '_Tuple2', _0: 'D', _1: 3};
		case 69:
			return {ctor: '_Tuple2', _0: 'D#', _1: 3};
		case 68:
			return {ctor: '_Tuple2', _0: 'E', _1: 3};
		case 70:
			return {ctor: '_Tuple2', _0: 'F', _1: 3};
		case 84:
			return {ctor: '_Tuple2', _0: 'F#', _1: 3};
		case 71:
			return {ctor: '_Tuple2', _0: 'G', _1: 3};
		case 89:
			return {ctor: '_Tuple2', _0: 'G#', _1: 3};
		case 72:
			return {ctor: '_Tuple2', _0: 'A', _1: 3};
		case 85:
			return {ctor: '_Tuple2', _0: 'A#', _1: 3};
		case 74:
			return {ctor: '_Tuple2', _0: 'B', _1: 3};
		case 75:
			return {ctor: '_Tuple2', _0: 'C', _1: 4};
		case 79:
			return {ctor: '_Tuple2', _0: 'C#', _1: 4};
		case 76:
			return {ctor: '_Tuple2', _0: 'D', _1: 4};
		default:
			return {ctor: '_Tuple2', _0: 'C', _1: 1};
	}
};
var _user$project$Audio$noteOffset = function (note) {
	var _p1 = note;
	switch (_p1) {
		case 'B#':
			return 0;
		case 'C':
			return 0;
		case 'C#':
			return 1;
		case 'Db':
			return 1;
		case 'D':
			return 2;
		case 'D#':
			return 3;
		case 'Eb':
			return 3;
		case 'E':
			return 4;
		case 'Fb':
			return 4;
		case 'E#':
			return 5;
		case 'F':
			return 5;
		case 'F#':
			return 6;
		case 'Gb':
			return 6;
		case 'G':
			return 7;
		case 'G#':
			return 8;
		case 'Ab':
			return 8;
		case 'A':
			return 9;
		case 'A#':
			return 10;
		case 'Bb':
			return 10;
		case 'B':
			return 11;
		case 'Cb':
			return 1;
		default:
			return 0;
	}
};
var _user$project$Audio$baseOctaveNoteToFrequency = function (note) {
	var distance = _user$project$Audio$noteOffset(note);
	var middleC = 440 * Math.pow(
		Math.pow(2, 1 / 12),
		-9);
	return middleC * Math.pow(
		Math.pow(2, 1 / 12),
		_elm_lang$core$Basics$toFloat(distance));
};
var _user$project$Audio$octaveNoteToFrequency = function (_p2) {
	var _p3 = _p2;
	var octaveDiff = _p3._1 - 4;
	return _user$project$Audio$baseOctaveNoteToFrequency(_p3._0) * Math.pow(2, octaveDiff);
};
var _user$project$Audio$keyToFrequency = function (key) {
	return _user$project$Audio$octaveNoteToFrequency(
		_user$project$Audio$toNoteTuple(key));
};
var _user$project$Audio$play = _elm_lang$core$Native_Platform.outgoingPort(
	'play',
	function (v) {
		return v;
	});
var _user$project$Audio$playKey = function (key) {
	var frequency = _user$project$Audio$keyToFrequency(key);
	return _user$project$Audio$play(frequency);
};
var _user$project$Audio$stop = _elm_lang$core$Native_Platform.outgoingPort(
	'stop',
	function (v) {
		return null;
	});
var _user$project$Audio$mute = _user$project$Audio$stop(
	{ctor: '_Tuple0'});
